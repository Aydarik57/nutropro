
import json
import logging
import schedule
import requests
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("wb_bot_config.json", "r") as f:
    CONFIG = json.load(f)

ALLOWED_USERS = CONFIG["allowed_users"]
WB_API_TOKEN = CONFIG["wildberries_api_token"]
SETTINGS_FILE = "user_settings.json"

# –ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_settings():
    try:
        with open(SETTINGS_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

def save_settings(settings):
    with open(SETTINGS_FILE, "w") as f:
        json.dump(settings, f)

user_settings = load_settings()

def is_allowed(user):
    return f"@{user.username}" in ALLOWED_USERS

# ====== API –∑–∞–ø—Ä–æ—Å—ã ======
def get_sales():
    headers = {"Authorization": WB_API_TOKEN}
    date_today = datetime.now().strftime("%Y-%m-%d")
    date_week = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")

    try:
        # –°–µ–≥–æ–¥–Ω—è
        response_today = requests.get(
            f"https://statistics-api.wildberries.ru/api/v1/supplier/sales?dateFrom={date_today}",
            headers=headers
        )
        sales_today = response_today.json()
        qty_today = len(sales_today)
        amount_today = sum(item['forPay'] for item in sales_today)

        # –ù–µ–¥–µ–ª—è
        response_week = requests.get(
            f"https://statistics-api.wildberries.ru/api/v1/supplier/sales?dateFrom={date_week}",
            headers=headers
        )
        sales_week = response_week.json()
        qty_week = len(sales_week)
        amount_week = sum(item['forPay'] for item in sales_week)

        return f"üí∞ –ü—Ä–æ–¥–∞–∂–∏:
–°–µ–≥–æ–¥–Ω—è: {qty_today} —à—Ç. ‚Äî {amount_today} ‚ÇΩ
–ù–µ–¥–µ–ª—è: {qty_week} —à—Ç. ‚Äî {amount_week} ‚ÇΩ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂: {e}"

def get_stocks():
    headers = {"Authorization": WB_API_TOKEN}
    try:
        response = requests.get(
            "https://statistics-api.wildberries.ru/api/v1/supplier/stocks",
            headers=headers
        )
        stocks = response.json()
        if not stocks:
            return "–û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç üòî"

        msg = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:
"
        for item in stocks[:15]:
            name = item.get("nmId", "—Ç–æ–≤–∞—Ä")
            qty = item.get("quantity", 0)
            msg += f"- {name}: {qty} —à—Ç.
"
        return msg
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}"

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update.effective_user):
        await update.message.reply_text("–ë—Ä–∞—Ç, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω ‚ùå")
        return

    keyboard = [
        [KeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∏"), KeyboardButton("üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")],
        [KeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")]
    ]
    await update.message.reply_text("–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, –±—Ä–∞—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = f"@{user.username}"
    if not is_allowed(user):
        return

    msg = update.message.text
    settings = load_settings()

    if msg == "üí∞ –ü—Ä–æ–¥–∞–∂–∏":
        await update.message.reply_text(get_sales())
    elif msg == "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ":
        await update.message.reply_text(get_stocks())
    elif msg == "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=ReplyKeyboardMarkup([
            ["‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
            ["‚úâÔ∏è –¢–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã –∏ —á–∞—Ç—ã"],
            ["‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
        ], resize_keyboard=True))
    elif msg == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        settings[username] = "all"
        save_settings(settings)
        await update.message.reply_text("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã üîî")
    elif msg == "‚úâÔ∏è –¢–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã –∏ —á–∞—Ç—ã":
        settings[username] = "reviews"
        save_settings(settings)
        await update.message.reply_text("–í–∫–ª—é—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã –∏ —á–∞—Ç—ã ‚úâÔ∏è")
    elif msg == "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        settings[username] = "off"
        save_settings(settings)
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå")


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
async def check_updates_and_notify(app):
    settings = load_settings()
    headers = {"Authorization": WB_API_TOKEN}
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã, –∑–∞–∫–∞–∑—ã –∏ —Ç.–¥. (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
        date_from = (datetime.now() - timedelta(minutes=10)).strftime("%Y-%m-%dT%H:%M:%S")
        response = requests.get(
            f"https://statistics-api.wildberries.ru/api/v1/supplier/sales?dateFrom={date_from}",
            headers=headers
        )
        data = response.json()
        if data:
            for user in ALLOWED_USERS:
                mode = settings.get(user, "all")
                if mode == "off":
                    continue
                chat = await app.bot.get_chat(user)
                text = f"üõí –ù–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ 10 –º–∏–Ω—É—Ç: {len(data)} —à—Ç."
                await app.bot.send_message(chat_id=chat.id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

async def scheduled_report(app):
    pass

async def scheduler(app):
    asyncio.create_task(check_updates_and_notify(app))
    while True:
        schedule.run_pending()
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

async def on_startup(app):
    asyncio.create_task(scheduler(app))

def main():
    app = ApplicationBuilder().token("7581299433:AAEYKFEHSB5PVYgMxlS-cThhw9y2PwCTMS4").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.post_init = on_startup
    app.run_polling()

if __name__ == "__main__":
    main()
